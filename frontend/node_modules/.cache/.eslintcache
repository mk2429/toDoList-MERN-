[{"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\index.tsx":"1","C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\App.tsx":"2","C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\Home.tsx":"3","C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\InputArea.tsx":"4","C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\ListItems.tsx":"5","C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\UseAuth.tsx":"6","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\index.tsx":"7","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\App.tsx":"8","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\UseAuth.tsx":"9","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\Home.tsx":"10","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\InputArea.tsx":"11","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\ListItems.tsx":"12"},{"size":253,"mtime":1687844285293,"results":"13","hashOfConfig":"14"},{"size":307,"mtime":1687888896762,"results":"15","hashOfConfig":"14"},{"size":2553,"mtime":1687888829994,"results":"16","hashOfConfig":"14"},{"size":1662,"mtime":1687888845580,"results":"17","hashOfConfig":"14"},{"size":2842,"mtime":1687888886163,"results":"18","hashOfConfig":"14"},{"size":830,"mtime":1687888908524,"results":"19","hashOfConfig":"14"},{"size":253,"mtime":1687844285293,"results":"20","hashOfConfig":"21"},{"size":307,"mtime":1687888896762,"results":"22","hashOfConfig":"21"},{"size":830,"mtime":1687888908524,"results":"23","hashOfConfig":"21"},{"size":2565,"mtime":1687894237442,"results":"24","hashOfConfig":"21"},{"size":1633,"mtime":1687894310630,"results":"25","hashOfConfig":"21"},{"size":2982,"mtime":1687894272137,"results":"26","hashOfConfig":"21"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"qjewcj",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j29pts",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\index.tsx",[],[],[],"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\App.tsx",[],[],"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\Home.tsx",["68"],[],"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\InputArea.tsx",["69"],[],"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\Components\\ListItems.tsx",["70","71"],[],"C:\\Users\\hp\\Downloads\\ToDoListUsingTypeScript\\my-app\\src\\UseAuth.tsx",["72"],[],"C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\index.tsx",[],[],"C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\App.tsx",[],[],"C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\UseAuth.tsx",["73"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Keycloak from \"keycloak-js\";\r\n\r\nconst client = new Keycloak({\r\n    url: \"http://127.0.0.1:8080\",\r\n    realm: \"ToDoList\",\r\n    clientId: \"toDoApp\"\r\n});\r\n\r\nexport const UseAuth = () => {\r\n    const isRun = useRef(false);\r\n    const [isLogin, setLogin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const initializeKeycloak = async () => {\r\n            if (isRun.current) return;\r\n\r\n            isRun.current = true;\r\n            try {\r\n                await client.init({ onLoad: \"login-required\" });\r\n                setLogin(true);\r\n            } catch (error) {\r\n                console.error(\"Keycloak initialization error:\", error);\r\n            }\r\n        };\r\n\r\n        initializeKeycloak();\r\n    }, []);\r\n\r\n    return {\r\n        isLogin\r\n    };\r\n};\r\n","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\Home.tsx",["74"],[],"import React, { useState, useEffect } from \"react\";\r\nimport Fab from '@mui/material/Fab';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport { InputArea } from \"./InputArea\";\r\nimport { ListItems } from \"./ListItems\";\r\nimport Typewriter from \"typewriter-effect\";\r\ntype homeProp = {\r\n    userName?: string\r\n}\r\nexport const Home = (props: homeProp) => {\r\n    const [inputArea, setInputArea] = useState(false);\r\n    const [allTaskArray, setAllTaskArray] = useState([])\r\n    async function showTask() {\r\n        try {\r\n            const response = await fetch(\"https://todolistmern.onrender.com/api/showTask\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            });\r\n            const data = await response.json();\r\n            setAllTaskArray(data)\r\n            console.log(allTaskArray)\r\n        } catch (error) {\r\n            throw new Error(\"Error adding task\");\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        showTask()\r\n    }, []);\r\n    function handleCloseInputArea() {\r\n        showTask()\r\n        setInputArea(false)\r\n    }\r\n    return (\r\n        <div className=\"homeContainer\" style={{ position: \"relative\" }}>\r\n            <h1 style={{ textAlign: \"center\", marginTop: \"30px\", color: \"#d9dff8\" }}>To Do List</h1>\r\n            <div className=\"typeWriter\">\r\n                <Typewriter\r\n                    options={{\r\n                        delay: 40,\r\n                    }}\r\n                    onInit={(typewriter) => {\r\n                        typewriter\r\n                            .typeString(\"Hey Buddy! 😀\")\r\n                            .pauseFor(500)\r\n                            .deleteAll()\r\n                            .typeString(\"Streamline your day. Achieve more. 🚀\")\r\n                            .pauseFor(500)\r\n                            .deleteAll()\r\n                            .typeString(\"You Can Cut. ❌\")\r\n                            .typeString(\" You Can Delete. 🗑️\")\r\n                            .start();\r\n                    }}\r\n                /></div>\r\n            <h1>{props.userName}</h1>\r\n            {inputArea ? <InputArea onClose={handleCloseInputArea} /> : null}\r\n            {!inputArea ? <Fab color=\"secondary\" size=\"small\" aria-label=\"add\" onClick={() => setInputArea(true)} style={{ position: \"absolute\", bottom: \"15px\", right: \"15px\" }}>\r\n                <AddIcon />\r\n            </Fab> : null}\r\n            <ListItems allTaskArray={allTaskArray} onDelete={showTask} />\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\InputArea.tsx",["75"],[],"import { useState, ChangeEvent } from \"react\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport Fab from '@mui/material/Fab';\r\ntype InputAreaProps = {\r\n    onClose: () => void,\r\n}\r\n\r\n\r\nexport const InputArea = (props: InputAreaProps) => {\r\n    const [inputItem, setInputItem] = useState(\"\");\r\n    function handleChange(event: ChangeEvent<HTMLTextAreaElement>) {\r\n        setInputItem(event.target.value);\r\n    }\r\n    async function handleClick() {\r\n        try {\r\n            const response = await fetch(\"https://todolistmern.onrender.com/api/addTask\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ task: inputItem })\r\n            });\r\n            setInputItem(\"\")\r\n            const data = await response.json();\r\n        } catch (error) {\r\n            throw new Error(\"Error adding task\");\r\n        }\r\n\r\n    }\r\n    return (\r\n        <div className=\"inputAreaContainer\">\r\n            <CancelIcon style={{ position: \"absolute\", top: \"15px\", right: \"15px\", color: \"red\" }} onClick={props.onClose} />\r\n            <h2 >Enter New Task !</h2>\r\n            <div className=\"writingArea\" >\r\n                <textarea placeholder='Enter Your Task Here' onChange={handleChange} value={inputItem}></textarea>\r\n                <Fab variant=\"extended\" color=\"primary\" onClick={() => handleClick()}>\r\n                    <AddIcon sx={{ mr: 1 }} />\r\n                    Add New Task\r\n                </Fab>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\hp\\Downloads\\deployedToDoMern\\frontend\\src\\Components\\ListItems.tsx",["76","77"],[],"import React, { useState } from \"react\";\r\nimport IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\n\r\ntype allTaskArrayType = {\r\n    allTaskArray: string[];\r\n    onDelete: () => void\r\n}\r\nexport const ListItems = (props: allTaskArrayType) => {\r\n\r\n    async function deleteTask(task: string) {\r\n        try {\r\n            const response = await fetch(\"https://todolistmern.onrender.com/api/deleteTask\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify({ task: task })\r\n            });\r\n            const data = await response.json();\r\n            props.onDelete()\r\n        } catch (error) {\r\n            throw new Error(\"Error adding task\");\r\n        }\r\n\r\n    }\r\n\r\n    type makeListItemType = {\r\n        item: string;\r\n        index: number\r\n    }\r\n    function toggleLineThrough(itemid: string) {\r\n        const element = document.getElementById(itemid);\r\n        if (element) {\r\n            if (element.style.textDecoration === \"none\") {\r\n                element.style.textDecoration = \"line-through\"\r\n            }\r\n            else {\r\n                element.style.textDecoration = \"none\"\r\n            }\r\n        }\r\n\r\n    }\r\n    function getRandomRGB() {\r\n        const r = Math.floor(Math.random() * 256);\r\n        const g = Math.floor(Math.random() * 256);\r\n        const b = Math.floor(Math.random() * 256);\r\n        return `rgb(${r}, ${g}, ${b})`;\r\n    }\r\n    function mouseEnterLiDiv(itemDivId: string) {\r\n        const element = document.getElementById(itemDivId)\r\n        if (element) {\r\n            element.style.background = getRandomRGB()\r\n\r\n        }\r\n\r\n    }\r\n    function mouseLeaveLiDiv(itemDivId: string) {\r\n        const element = document.getElementById(itemDivId)\r\n        if (element) {\r\n            element.style.background = \"#d9dff8\"\r\n        }\r\n\r\n    }\r\n    function makeListItem({ item, index }: makeListItemType) {\r\n        const itemId = `item${index}`\r\n        const itemDivId = `div${index}`\r\n        return (\r\n            <div className=\"lidiv\">\r\n                <div className=\"liItem\" style={{ background: \"#d9dff8\" }} id={itemDivId} onMouseEnter={() => mouseEnterLiDiv(itemDivId)} onMouseLeave={() => mouseLeaveLiDiv(itemDivId)}><div key={index} id={itemId} style={{ color: \"black\", width: \"80%\", wordWrap: \"break-word\" }} onClick={() => toggleLineThrough(itemId)}>{item}</div> <IconButton aria-label=\"delete\" onClick={() => deleteTask(item)}>\r\n                    <DeleteIcon style={{ color: \"purple\" }} />\r\n                </IconButton>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return <div className=\"allTaskDiv\">\r\n{props.allTaskArray.length===0? <h6 style={{ textAlign: \"center\", marginTop: \"30px\", color: \"grey\" }}>No Task Added !</h6>:null}\r\n        {props.allTaskArray.map((item, index) => makeListItem({ item, index }))}\r\n\r\n    </div>\r\n}",{"ruleId":"78","severity":1,"message":"79","line":31,"column":8,"nodeType":"80","endLine":31,"endColumn":10,"suggestions":"81"},{"ruleId":"82","severity":1,"message":"83","line":26,"column":19,"nodeType":"84","messageId":"85","endLine":26,"endColumn":23},{"ruleId":"82","severity":1,"message":"86","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":20,"column":19,"nodeType":"84","messageId":"85","endLine":20,"endColumn":23},{"ruleId":"82","severity":1,"message":"87","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"82","severity":1,"message":"87","line":1,"column":8,"nodeType":"84","messageId":"85","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"79","line":31,"column":8,"nodeType":"80","endLine":31,"endColumn":10,"suggestions":"88"},{"ruleId":"82","severity":1,"message":"83","line":25,"column":19,"nodeType":"84","messageId":"85","endLine":25,"endColumn":23},{"ruleId":"82","severity":1,"message":"86","line":1,"column":17,"nodeType":"84","messageId":"85","endLine":1,"endColumn":25},{"ruleId":"82","severity":1,"message":"83","line":20,"column":19,"nodeType":"84","messageId":"85","endLine":20,"endColumn":23},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'showTask'. Either include it or remove the dependency array.","ArrayExpression",["89"],"@typescript-eslint/no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'React' is defined but never used.",["90"],{"desc":"91","fix":"92"},{"desc":"91","fix":"93"},"Update the dependencies array to be: [showTask]",{"range":"94","text":"95"},{"range":"96","text":"95"},[1025,1027],"[showTask]",[1037,1039]]