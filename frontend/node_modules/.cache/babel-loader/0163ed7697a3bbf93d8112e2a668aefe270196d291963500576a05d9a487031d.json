{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport Keycloak from \"keycloak-js\";\nconst client = new Keycloak({\n  url: \"http://127.0.0.1:8080\",\n  realm: \"ToDoList\",\n  clientId: \"toDoApp\"\n});\nexport const UseAuth = () => {\n  _s();\n  const isRun = useRef(false);\n  const [isLogin, setLogin] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  useEffect(() => {\n    const initializeKeycloak = async () => {\n      if (isRun.current) return;\n      isRun.current = true;\n      try {\n        await client.init({\n          onLoad: \"login-required\"\n        });\n        setLogin(true);\n        if (client.idTokenParsed) {\n          setUserName(client.idTokenParsed.name);\n        }\n      } catch (error) {\n        console.error(\"Keycloak initialization error:\", error);\n      }\n    };\n    initializeKeycloak();\n  }, []);\n  return {\n    isLogin,\n    userName\n  };\n};\n_s(UseAuth, \"+Cx94KtX+Y0LB8sJ2zbbP4kgjR4=\");\n_c = UseAuth;\nvar _c;\n$RefreshReg$(_c, \"UseAuth\");","map":{"version":3,"names":["useState","useEffect","useRef","Keycloak","client","url","realm","clientId","UseAuth","_s","isRun","isLogin","setLogin","userName","setUserName","initializeKeycloak","current","init","onLoad","idTokenParsed","name","error","console","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/ToDoListUsingTypeScript/my-app/src/UseAuth.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Keycloak from \"keycloak-js\";\r\n\r\nconst client = new Keycloak({\r\n  url: \"http://127.0.0.1:8080\",\r\n  realm: \"ToDoList\",\r\n  clientId: \"toDoApp\"\r\n});\r\n\r\nexport const UseAuth = () => {\r\n  const isRun = useRef(false);\r\n  const [isLogin, setLogin] = useState(false);\r\n  const [userName, setUserName] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const initializeKeycloak = async () => {\r\n      if (isRun.current) return;\r\n\r\n      isRun.current = true;\r\n      try {\r\n        await client.init({ onLoad: \"login-required\" });\r\n        setLogin(true);\r\n\r\n        if (client.idTokenParsed) {\r\n          setUserName(client.idTokenParsed.name);\r\n        } \r\n      } catch (error) {\r\n        console.error(\"Keycloak initialization error:\", error);\r\n      }\r\n    };\r\n\r\n    initializeKeycloak();\r\n  }, []);\r\n\r\n  return {\r\n    isLogin,\r\n    userName\r\n  };\r\n};\r\n"],"mappings":";AAAA,SAAgBA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,aAAa;AAElC,MAAMC,MAAM,GAAG,IAAID,QAAQ,CAAC;EAC1BE,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,UAAU;EACjBC,QAAQ,EAAE;AACZ,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,KAAK,GAAGR,MAAM,CAAC,KAAK,CAAC;EAC3B,MAAM,CAACS,OAAO,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC3C,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMc,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACrC,IAAIL,KAAK,CAACM,OAAO,EAAE;MAEnBN,KAAK,CAACM,OAAO,GAAG,IAAI;MACpB,IAAI;QACF,MAAMZ,MAAM,CAACa,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAiB,CAAC,CAAC;QAC/CN,QAAQ,CAAC,IAAI,CAAC;QAEd,IAAIR,MAAM,CAACe,aAAa,EAAE;UACxBL,WAAW,CAACV,MAAM,CAACe,aAAa,CAACC,IAAI,CAAC;QACxC;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDN,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACLJ,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAACJ,EAAA,CA7BWD,OAAO;AAAAe,EAAA,GAAPf,OAAO;AAAA,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}