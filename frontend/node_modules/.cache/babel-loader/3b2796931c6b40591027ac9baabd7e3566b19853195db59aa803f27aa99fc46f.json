{"ast":null,"code":"// import React, { useState, useReducer, createContext, useContext } from \"react\";\n\n// type InputArrayType = {\n//   TasksList: string[];\n//   dispatch: React.Dispatch<TaskListAction>;\n// };\n\n// type InputArrayProviderType = {\n//   children: React.ReactNode;\n// };\n\n// type TaskListAction =\n//   | { type: \"Add\"; task: string }\n//   | { type: \"Delete\"; task: string }\n//   | { type: \"SetTasks\"; tasks: string[] };\n\n// const InputArrayContext = createContext<InputArrayType | undefined>(undefined);\n\n// const TasksListReducer = (state: string[], action: TaskListAction): string[] => {\n//   switch (action.type) {\n//     case \"Add\":\n//       // Perform the asynchronous add operation\n//       addTask(action.task)\n//         .then((updatedTasks) => {\n//           // Dispatch a new action to update the state with the updated tasks\n//           return updatedTasks\n//         })\n//         .catch((error) => {\n//           console.error(\"Error adding task\", error);\n//         });\n//       return state;\n\n//     case \"Delete\":\n//       // Perform the asynchronous delete operation\n//       deleteTask(action.task)\n//         .then((updatedTasks) => {\n//           // Dispatch a new action to update the state with the updated tasks\n//           return updatedTasks\n//         })\n//         .catch((error) => {\n//           console.error(\"Error deleting task\", error);\n//         });\n//       return state;\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const addTask = async (task: string): Promise<string[]> => {\n//   try {\n//     const response = await fetch(\"http://localhost:5000/api/addTask\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify({ task:task })\n//     });\n//     const data = await response.json();\n//     return data; // Assuming the response from the backend includes an array of tasks\n//   } catch (error) {\n//     throw new Error(\"Error adding task\");\n//   }\n// };\n\n// const deleteTask = async (task: string): Promise<string[]> => {\n//   try {\n//     const response = await fetch(\"http://localhost:5000/api/deleteTask\", {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\"\n//       },\n//       body: JSON.stringify({ task :task})\n//     });\n//     const data = await response.json();\n//     return data.tasks; // Assuming the response from the backend includes an array of tasks\n//   } catch (error) {\n//     throw new Error(\"Error deleting task\");\n//   }\n// };\n\n// export const InputArrayProvider = ({ children }: InputArrayProviderType) => {\n//   const [TasksList, dispatch] = useReducer(TasksListReducer, []);\n\n//   return (\n//     <InputArrayContext.Provider value={{ TasksList, dispatch }}>\n//       {children}\n//     </InputArrayContext.Provider>\n//   );\n// };\n\n// export const useInputArray = (): InputArrayType => {\n//   const context = useContext(InputArrayContext);\n//   if (!context) {\n//     throw new Error(\"Error with Input provider\");\n//   }\n//   return context;\n// };\n\n// // code for only frontend\n\n// // import React, { useState, useReducer, useEffect, createContext, useContext } from \"react\";\n\n// // type InputArrayType = {\n// //     TasksList: string[];\n// //     dispatch:React.Dispatch<TaskListAction>\n// // }\n// // type InputArrayProviderType = {\n// //     children: React.ReactNode\n// // }\n// // type TaskListAction = {\n// //     type: \"Add\" | \"Delete\";\n// //     task: string;\n// // }\n// // const InputArrayContext = createContext<InputArrayType | undefined>(undefined);\n\n// // const TasksListReducer = (state: string[], action: TaskListAction):string[] => {\n// //     switch (action.type) {\n// //         case \"Add\":\n// //             return [...state,action.task];\n// //         case \"Delete\":\n// //             return state.filter(item => item !== action.task)\n// //     }\n// // }\n\n// // export const InputArrayProvider = ({ children }: InputArrayProviderType) => {\n// //     const [TasksList, dispatch] = useReducer(TasksListReducer, [])\n// //     return(\n// //         <InputArrayContext.Provider value={{TasksList,dispatch}}>\n// //             {children}\n// //         </InputArrayContext.Provider>\n// //     )\n// // }\n// // export const useInputArray=() : InputArrayType=>{\n// //     const context=useContext(InputArrayContext);\n// //     if (!context) {\n// //         throw new Error('error withrovider');\n// //       }\n// //       return context;\n// // }","map":{"version":3,"names":[],"sources":["C:/Users/hp/Downloads/ToDoListUsingTypeScript/my-app/src/Contexts/InputArrayContext.tsx"],"sourcesContent":["// import React, { useState, useReducer, createContext, useContext } from \"react\";\r\n\r\n// type InputArrayType = {\r\n//   TasksList: string[];\r\n//   dispatch: React.Dispatch<TaskListAction>;\r\n// };\r\n\r\n// type InputArrayProviderType = {\r\n//   children: React.ReactNode;\r\n// };\r\n\r\n// type TaskListAction =\r\n//   | { type: \"Add\"; task: string }\r\n//   | { type: \"Delete\"; task: string }\r\n//   | { type: \"SetTasks\"; tasks: string[] };\r\n\r\n// const InputArrayContext = createContext<InputArrayType | undefined>(undefined);\r\n\r\n// const TasksListReducer = (state: string[], action: TaskListAction): string[] => {\r\n//   switch (action.type) {\r\n//     case \"Add\":\r\n//       // Perform the asynchronous add operation\r\n//       addTask(action.task)\r\n//         .then((updatedTasks) => {\r\n//           // Dispatch a new action to update the state with the updated tasks\r\n//           return updatedTasks\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error adding task\", error);\r\n//         });\r\n//       return state;\r\n\r\n//     case \"Delete\":\r\n//       // Perform the asynchronous delete operation\r\n//       deleteTask(action.task)\r\n//         .then((updatedTasks) => {\r\n//           // Dispatch a new action to update the state with the updated tasks\r\n//           return updatedTasks\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error deleting task\", error);\r\n//         });\r\n//       return state;\r\n\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const addTask = async (task: string): Promise<string[]> => {\r\n//   try {\r\n//     const response = await fetch(\"http://localhost:5000/api/addTask\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\"\r\n//       },\r\n//       body: JSON.stringify({ task:task })\r\n//     });\r\n//     const data = await response.json();\r\n//     return data; // Assuming the response from the backend includes an array of tasks\r\n//   } catch (error) {\r\n//     throw new Error(\"Error adding task\");\r\n//   }\r\n// };\r\n\r\n// const deleteTask = async (task: string): Promise<string[]> => {\r\n//   try {\r\n//     const response = await fetch(\"http://localhost:5000/api/deleteTask\", {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\"\r\n//       },\r\n//       body: JSON.stringify({ task :task})\r\n//     });\r\n//     const data = await response.json();\r\n//     return data.tasks; // Assuming the response from the backend includes an array of tasks\r\n//   } catch (error) {\r\n//     throw new Error(\"Error deleting task\");\r\n//   }\r\n// };\r\n\r\n// export const InputArrayProvider = ({ children }: InputArrayProviderType) => {\r\n//   const [TasksList, dispatch] = useReducer(TasksListReducer, []);\r\n\r\n//   return (\r\n//     <InputArrayContext.Provider value={{ TasksList, dispatch }}>\r\n//       {children}\r\n//     </InputArrayContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export const useInputArray = (): InputArrayType => {\r\n//   const context = useContext(InputArrayContext);\r\n//   if (!context) {\r\n//     throw new Error(\"Error with Input provider\");\r\n//   }\r\n//   return context;\r\n// };\r\n\r\n\r\n\r\n// // code for only frontend\r\n\r\n\r\n// // import React, { useState, useReducer, useEffect, createContext, useContext } from \"react\";\r\n\r\n// // type InputArrayType = {\r\n// //     TasksList: string[];\r\n// //     dispatch:React.Dispatch<TaskListAction>\r\n// // }\r\n// // type InputArrayProviderType = {\r\n// //     children: React.ReactNode\r\n// // }\r\n// // type TaskListAction = {\r\n// //     type: \"Add\" | \"Delete\";\r\n// //     task: string;\r\n// // }\r\n// // const InputArrayContext = createContext<InputArrayType | undefined>(undefined);\r\n\r\n// // const TasksListReducer = (state: string[], action: TaskListAction):string[] => {\r\n// //     switch (action.type) {\r\n// //         case \"Add\":\r\n// //             return [...state,action.task];\r\n// //         case \"Delete\":\r\n// //             return state.filter(item => item !== action.task)\r\n// //     }\r\n// // }\r\n\r\n// // export const InputArrayProvider = ({ children }: InputArrayProviderType) => {\r\n// //     const [TasksList, dispatch] = useReducer(TasksListReducer, [])\r\n// //     return(\r\n// //         <InputArrayContext.Provider value={{TasksList,dispatch}}>\r\n// //             {children}\r\n// //         </InputArrayContext.Provider>\r\n// //     )\r\n// // }\r\n// // export const useInputArray=() : InputArrayType=>{\r\n// //     const context=useContext(InputArrayContext);\r\n// //     if (!context) {\r\n// //         throw new Error('error withrovider');\r\n// //       }\r\n// //       return context;\r\n// // }"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}