{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useRef } from \"react\";\nimport Keycloak from \"keycloak-js\";\nconst client = new Keycloak({\n  url: \"http://127.0.0.1:8080\",\n  realm: \"DendriteProject\",\n  clientId: \"shazamApp\"\n});\nexport const UseAuth = () => {\n  _s();\n  const isRun = useRef(false);\n  const [isLogin, setLogin] = useState(false);\n  useEffect(() => {\n    const initializeKeycloak = async () => {\n      if (isRun.current) return;\n      isRun.current = true;\n      try {\n        await client.init({\n          onLoad: \"login-required\"\n        });\n        setLogin(true);\n      } catch (error) {\n        console.error(\"Keycloak initialization error:\", error);\n      }\n    };\n    initializeKeycloak();\n  }, []);\n  return {\n    isLogin\n  };\n};\n_s(UseAuth, \"BGDNiQCfJNkVFoWx84kYMQxqAjY=\");\n_c = UseAuth;\nvar _c;\n$RefreshReg$(_c, \"UseAuth\");","map":{"version":3,"names":["useState","useEffect","useRef","Keycloak","client","url","realm","clientId","UseAuth","_s","isRun","isLogin","setLogin","initializeKeycloak","current","init","onLoad","error","console","_c","$RefreshReg$"],"sources":["C:/Users/hp/Downloads/ToDoListUsingTypeScript/my-app/src/UseAuth.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Keycloak from \"keycloak-js\";\r\n\r\nconst client = new Keycloak({\r\n    url: \"http://127.0.0.1:8080\",\r\n    realm: \"DendriteProject\",\r\n    clientId: \"shazamApp\"\r\n});\r\n\r\nexport const UseAuth = () => {\r\n    const isRun = useRef(false);\r\n    const [isLogin, setLogin] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const initializeKeycloak = async () => {\r\n            if (isRun.current) return;\r\n\r\n            isRun.current = true;\r\n            try {\r\n                await client.init({ onLoad: \"login-required\" });\r\n                setLogin(true);\r\n            } catch (error) {\r\n                console.error(\"Keycloak initialization error:\", error);\r\n            }\r\n        };\r\n\r\n        initializeKeycloak();\r\n    }, []);\r\n\r\n    return {\r\n        isLogin\r\n    };\r\n};\r\n"],"mappings":";AAAA,SAAgBA,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,aAAa;AAElC,MAAMC,MAAM,GAAG,IAAID,QAAQ,CAAC;EACxBE,GAAG,EAAE,uBAAuB;EAC5BC,KAAK,EAAE,iBAAiB;EACxBC,QAAQ,EAAE;AACd,CAAC,CAAC;AAEF,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,KAAK,GAAGR,MAAM,CAAC,KAAK,CAAC;EAC3B,MAAM,CAACS,OAAO,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACZ,MAAMY,kBAAkB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAIH,KAAK,CAACI,OAAO,EAAE;MAEnBJ,KAAK,CAACI,OAAO,GAAG,IAAI;MACpB,IAAI;QACA,MAAMV,MAAM,CAACW,IAAI,CAAC;UAAEC,MAAM,EAAE;QAAiB,CAAC,CAAC;QAC/CJ,QAAQ,CAAC,IAAI,CAAC;MAClB,CAAC,CAAC,OAAOK,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MAC1D;IACJ,CAAC;IAEDJ,kBAAkB,CAAC,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IACHF;EACJ,CAAC;AACL,CAAC;AAACF,EAAA,CAvBWD,OAAO;AAAAW,EAAA,GAAPX,OAAO;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}